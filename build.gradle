buildscript {
    repositories {
        mavenCentral()
        maven {
		
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
	
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

ext.configFile = file "build.properties"

configFile.withReader {
	def prop = new Properties()
	prop.load(it)
	ext.config = new ConfigSlurper().parse prop
}

ENV = System.getenv()

// Drone.io Support
if(ENV.DRONE_BUILD_NUMBER)
	buildNum = ENV.DRONE_BUILD_NUMBER + " - drone"

// Jenkins Support
else if (ENV.BUILD_NUMBER)
	buildNum = ENV.BUILD_NUMBER + " - jenkins"

// Travis Support
else if (ENV.TRAVIS_BUILD_NUMBER)
	buildNum = ENV.TRAVIS_BUILD_NUMBER + " - travis"

// Codeship.io Support
else if (ENV.CI_BUILD_NUMBER)
	buildNum = ENV.CI_BUILD_NUMBER + " - codeship"

else
	buildNum = config.build

apply plugin: 'java'
apply plugin: 'forge'

version = "${config.minecraft_version}-${config.mod_version}." + buildNum
group= "io.github.iTitus" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "iTitusMyMod"

minecraft {

    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "eclipse/assets"
	
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processResources {
	
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	
}

task incrementBuildNumber() {
	dependsOn "reobf"
		doLast {
			// increment
			config.build = (config.build.toString().toInteger()) + 1
    
			// write back to the file
			configFile.withWriter {
				config.toProperties().store(it, "")
			}
		}
}

tasks.build.dependsOn "incrementBuildNumber"